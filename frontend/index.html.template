<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Google ID Token Demo</title>
</head>
<body>
  <h1>Google ID Token (Token Delivery) Demo</h1>

  <div id="g_id_signin"></div>

  <div id="status"></div>

  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <script>
    // GOOGLE_CLIENT_ID will be substituted by the entrypoint
    const GOOGLE_CLIENT_ID = "${GOOGLE_CLIENT_ID}";

    function updateStatus(msg) {
      const s = document.getElementById('status');
      s.innerText = msg;
    }

    function handleCredentialResponse(response) {
      // response.credential is the ID token (JWT)
      updateStatus('Got ID token â€” sending to backend...');

      fetch('/auth/google', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id_token: response.credential })
      }).then(res => res.json())
        .then(data => {
          if (data && data.ok) {
            updateStatus('Signed in as: ' + (data.user.name || data.user.email));
          } else {
            console.error('Backend error', data);
            updateStatus('Backend rejected token: ' + JSON.stringify(data));
          }
        }).catch(err => {
          console.error(err);
          updateStatus('Network / server error: ' + err.message);
        });
    }

    window.onload = function () {
      if (!GOOGLE_CLIENT_ID) {
        updateStatus('GOOGLE_CLIENT_ID not configured. Set env var and restart container.');
        return;
      }

      google.accounts.id.initialize({
        client_id: GOOGLE_CLIENT_ID,
        callback: handleCredentialResponse,
      });

      // Render a button
      google.accounts.id.renderButton(
